<?xml version="1.0" encoding="utf-8" ?>
<project default="build" xmlns="http://nant.sf.net/NAnt.xsd">
    <tstamp />

    <tstamp property="buildtime" pattern="yyyy-MM-dd" verbose="true" />

    <property name="nlog.debug" value="true" />
    <property name="nlog.optimize" value="true" />
    <property name="nlog.define" value="NANT" />

    <property name="scp.program" value="pscp" />
    <property name="ssh.program" value="plink" />
    <property name="scp.args" value="-q -batch" />
    <property name="ssh.args" value="-batch" />
    <property name="benchmark.mode" value="short" />

    <property name="deploy.host" value="jaak@sav.net" />
    
    <property name="nlog.csc.args" value="/nowarn:1591" />
    <property name="ndoc.version" value="2.0" />
    <property name="sandcastle.dir" value="c:\program files\sandcastle" />
	<property name="ndoc.basedir" value="D:\Apps\NDoc" unless="${property::exists('ndoc.basedir')}" />
    <property name="ndoc.path" value="${ndoc.basedir}/${ndoc.version}" dynamic="true" />
    <property name="ndoc.console.exe" value="${ndoc.path}/NDocConsole.exe" dynamic="true" />
    <property name="ndoc.console.args" value="-referencepath &quot;${framework::get-assembly-directory(framework::get-target-framework())}&quot;" dynamic="true" />
    <property name="prettyprinter.exe" value="tools/PrettyPrinter.exe" />
    <property name="ndocsyntax.path" value="tools/NDocSyntax.exe" />
    <property name="benchmark.loop.unroll" value="4" />

    <property name="webserver.deploy.dir" value="web/www.nlog-project.org/html" />
    <property name="csc.warninglevel" value="4" />

    <property name="nlog.package.name" value="${tstamp.date}" unless="${property::exists('nlog.package.name')}" />
    <property name="nlog.release.dir" value="releases/${nlog.package.name}" />
    <property name="ilmerge.version" value="1" />
    <property name="log4net.bin.dir" value="../log4net-1.2.10/bin" />
    <property name="enterpriselib.bin.dir" value="C:\Program Files\Microsoft Enterprise Library January 2006\bin" />

    <property name="installer.name" value="${nlog.release.dir}/nlog-${nlog.package.name}-setup.exe" />
    <property name="installer.debug.name" value="${nlog.release.dir}/nlog-${nlog.package.name}-setup-debug.exe" />
    <property name="source_snapshot.name" value="${nlog.release.dir}/nlog-${nlog.package.name}-src.zip" />
    <property name="binary_snapshot.name" value="${nlog.release.dir}/nlog-${nlog.package.name}-${framework::get-target-framework()}${if(nlog.debug,'-debug','')}.zip" dynamic="true" />
    <property name="help_package.name" value="${nlog.release.dir}/nlog-${nlog.package.name}-help.zip" />
    <property name="webtest.dir" value="${project::get-base-directory()}/webtest" />

    <property name="clover.enabled" value="false" />
    <property name="clover.home" value="D:\Apps\CloverNLog" />

    <target name="detectversion">
    </target>

    <target name="configure">
        <call target="configure-${framework::get-target-framework()}" />
        <property name="buildsubdir" value="${framework::get-target-framework()}${if(clover.enabled,'-clover','')}${if(nlog.debug,'-debug','')}" />
        <property name="nlog.dir" value="${project::get-base-directory()}/build/${buildsubdir}/bin" unless="${property::exists('nlog.dir')}" />
        <property name="nlog.help.dir" value="build/${buildsubdir}/help" unless="${property::exists('nlog.help.dir')}" />
        <property name="nunit2.report.dir" value="${project::get-base-directory()}/build/${buildsubdir}/test_results" />
        <property name="clover.report.dir" value="build/${buildsubdir}/clover_report" />
        <property name="clover.build.dir" value="build/${buildsubdir}/clover" />

        <echo message="Building NLog for ${framework::get-target-framework()}" />
        <echo message="Package name: ${nlog.package.name}" />
        <echo message="Target dir: ${nlog.dir}" />

        <mkdir dir="${nlog.dir}" />
        <mkdir dir="${nlog.release.dir}" />
    </target>

    <target name="build" depends="configure, build-${framework::get-target-framework()}">
    </target>

    <target name="debug">
        <property name="nlog.debug" value="true" />
        <property name="nlog.optimize" value="false" />
    </target>

    <target name="release">
        <property name="nlog.debug" value="false" />
        <property name="nlog.optimize" value="true" />
    </target>

    <target name="binary_snapshot" depends="build">
        <zip zipfile="${binary_snapshot.name}">
            <fileset basedir="build/${buildsubdir}">
                <include name="bin/*" />
            </fileset>
            <fileset basedir=".">
                <include name="LICENSE.txt" />
                <include name="examples/**/*" />
            </fileset>
            <fileset basedir="src/NLogC">
                <include name="NLogC FAQ.txt" />
            </fileset>
        </zip>
    </target>

    <target name="clean" depends="configure">
        <delete dir="build/${buildsubdir}" failonerror="false" />
        <delete verbose="true">
            <fileset basedir=".">
                <include name="**/*.suo" />
                <include name="**/*.ncb" />
            </fileset>
        </delete>
        <delete verbose="true">
            <fileset basedir="src">
                <include name="*/bin/**" />
                <include name="*/obj/**" />
                <include name="*/bin" />
                <include name="*/obj" />
                <include name="NLogC/Debug/**" />
                <include name="NLogC/Release/**" />
                <include name="NLogC/Debug" />
                <include name="NLogC/Release" />
            </fileset>
        </delete>
        <delete verbose="true">
            <fileset basedir="tools">
                <include name="*/bin/**" />
                <include name="*/obj/**" />
                <include name="*/bin" />
                <include name="*/obj" />
            </fileset>
        </delete>
        <delete verbose="true">
            <fileset basedir="tests">
                <include name="*/bin/**" />
                <include name="*/obj/**" />
                <include name="*/bin" />
                <include name="*/obj" />
                <include name="NLogCTest/Debug/**" />
                <include name="NLogCTest/Release/**" />
                <include name="NLogCTest/Debug" />
                <include name="NLogCTest/Release" />
            </fileset>
        </delete>
    </target>

    <target name="update-build-number">
        <exec program="tools/UpdateBuildNumber.exe" commandline="NLog.version src/NLog/AssemblyBuildInfo.cs build/NLog.buildversion" useruntimeengine="true" />
        <exec program="tools/UpdateBuildNumber.exe" commandline="NLog.version src/NLog.ComInterop/AssemblyBuildInfo.cs build/NLog.buildversion" useruntimeengine="true" />
        <foreach item="Line" in="build/NLog.buildversion" delim="." property="tmp1,tmp2,tmp3,tmp4">
            <property name="nlog.version.major" value="${tmp1}" />
            <property name="nlog.version.minor" value="${tmp2}" />
            <property name="nlog.version.revision" value="${tmp3}" />
            <property name="nlog.version.build" value="${tmp4}" />
        </foreach>

        <property name="nlog.version" value="${nlog.version.major}.${nlog.version.minor}.${nlog.version.revision}.${nlog.version.build}" />
    </target>

    <target name="NLog" depends="configure, update-build-number">
        <csc target="library" output="${nlog.dir}/NLog.dll" doc="${nlog.dir}/NLog.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}" warnaserror="true">
            <sources basedir="src">
                <include name="NLog/**/*.cs" />
            </sources>
            <references>
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
                <include name="System.Data.dll" />
                <include name="System.Configuration.dll" />
                <include name="System.Messaging.dll" />
                <include name="System.Windows.Forms.dll" />
                <include name="System.Web.dll" />
                <include name="System.Web.Services.dll" />
                <include name="Mono.Posix.dll" />
            </references>
            <arg value="${nlog.csc.args}"/>
        </csc>
    </target>

    <target name="xmldoc" depends="configure">
        <mkdir dir="build/doc" />

        <property name="oldframework" value="${nant.settings.currentframework}" />
        
        <property name="nant.settings.currentframework" value="mono-2.0" failonerror="false" />
        <property name="nant.settings.currentframework" value="net-2.0" failonerror="false" />

        <csc target="library" output="build/doc/NLog.dll" doc="build/doc/NLog.xml" warninglevel="0" define="DOCUMENTATION;NANT">
            <sources basedir="src">
                <include name="NLog/**/*.cs" />
            </sources>
            <references>
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
                <include name="System.Data.dll" />
                <include name="System.Messaging.dll" />
                <include name="System.Windows.Forms.dll" />
                <include name="System.Web.dll" />
                <include name="System.Web.Services.dll" />
                <include name="Mono.Posix.dll" />
            </references>
        </csc>

        <exec program="${ndocsyntax.path}" 
              commandline="build/doc/NLog.xml" 
              workingdir="." useruntimeengine="true" />
        <uptodate property="xmldoc.uptodate">
            <targetfiles>
                <include name="build/doc/doc.xml" />
            </targetfiles>
            <sourcefiles basedir="build/doc">
                <include name="**/*.dll" />
            </sourcefiles>
        </uptodate>
        <if test="${not xmldoc.uptodate}">
            <exec program="${ndoc.console.exe}" 
                  verbose="true" workingdir="." 
                  commandline="${ndoc.console.args} -documenter=XML -project=./NLog.ndoc" 
                  useruntimeengine="true" />
            <exec program="${ndocsyntax.path}" 
                  commandline="build/doc/doc.xml" 
                  workingdir="." useruntimeengine="true" />
        </if>
        <echo message="Getting target, filter and layout renderer names from build/doc/doc.xml ..." />
        <script language="C#">
            <code><![CDATA[
                public static void ScriptMain(Project project) {
                    System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                    doc.Load(project.ExpandProperties("${project::get-base-directory()}/build/doc/doc.xml", Location.UnknownLocation));
                    string targets = "";
                    string layoutRenderers = "";
                    string filters = "";
                    string layouts = "";

                    // NDoc 2.0 XML layout
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@id='T:NLog.TargetAttribute']/argument[position()=1]/@value"))
                    {
                        if (targets != "")
                        targets += ",";
                        targets += node.InnerText;
                    }
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@id='T:NLog.LayoutRendererAttribute']/argument[position()=1]/@value"))
                    {
                        if (layoutRenderers != "")
                        layoutRenderers += ",";
                        layoutRenderers += node.InnerText;
                    }
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@id='T:NLog.FilterAttribute']/argument[position()=1]/@value"))
                    {
                        if (filters != "")
                        filters += ",";
                        filters += node.InnerText;
                    }

                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@id='T:NLog.LayoutAttribute']/argument[position()=1]/@value"))
                    {
                        if (layouts != "")
                            layouts += ",";
                        layouts += node.InnerText;
                    }

                    // NDoc 1.1 XML layout
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@name='NLog.TargetAttribute']/property[@name='Name']/@value"))
                    {
                        if (targets != "")
                        targets += ",";
                        targets += node.InnerText;
                    }
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@name='NLog.LayoutRendererAttribute']/property[@name='FormatString']/@value"))
                    {
                        if (layoutRenderers != "")
                        layoutRenderers += ",";
                        layoutRenderers += node.InnerText;
                    }
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@name='NLog.FilterAttribute']/property[@name='Name']/@value"))
                    {
                        if (filters != "")
                        filters += ",";
                        filters += node.InnerText;
                    }
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@name='NLog.LayoutAttribute']/property[@name='Name']/@value"))
                    {
                        if (layouts != "")
                            layouts += ",";
                        layouts += node.InnerText;
                    }

                    project.Properties["nlog.targetNames"] = targets;
                    project.Properties["nlog.layoutRendererNames"] = layoutRenderers;
                    project.Properties["nlog.filterNames"] = filters;
                    project.Properties["nlog.layoutNames"] = layouts;
                  
                }
                ]]></code>
        </script>
        <echo message="Target names: ${nlog.targetNames}" />
        <echo message="Layout renderer names: ${nlog.layoutRendererNames}" />
        <echo message="Filter names: ${nlog.filterNames}" />
        <property name="nant.settings.currentframework" value="${oldframework}" />
    </target>

    <target name="NLog.ComInterop" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.ComInterop.dll" doc="${nlog.dir}/NLog.ComInterop.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.ComInterop">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
            <arg value="${nlog.csc.args}"/>
        </csc>
    </target>

    <target name="NLog.UnitTests" depends="NLog">
        <copy file="${nant::get-base-directory()}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/nunit.framework.dll" tofile="${nlog.dir}/nunit.framework.dll" />
        <csc target="library" output="${nlog.dir}/NLog.UnitTests.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.UnitTests">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="${nlog.dir}/nunit.framework.dll" />
            </references>
        </csc>
        <csc target="exe" output="${nlog.dir}/Runner.exe" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tools">
                <include name="Runner.cs" />
            </sources>
        </csc>
    </target>

    <target name="NLog.UnitTests.Web" depends="NLog">
        <copy file="${nant::get-base-directory()}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/nunit.framework.dll" tofile="${nlog.dir}/nunit.framework.dll" />
        <csc target="library" output="${nlog.dir}/NLog.UnitTests.Web.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.UnitTests.Web">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="${nlog.dir}/nunit.framework.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.Test" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Test.exe" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.Test">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="tests/NLog.Test/App.config" tofile="${nlog.dir}/NLog.Test.exe.config" />
    </target>

    <target name="NLog.Benchmark" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark.exe" define="${nlog.define};NLOG" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.Benchmark">
                <include name="*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy todir="${nlog.dir}">
            <fileset basedir="tests/NLog.Benchmark">
                <include name="NLog.config" />
                <include name="*.png" />
                <include name="*.xsl" />
            </fileset>
        </copy>
        <property name="log4netbinary" value="${log4net.bin.dir}/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/${if(nlog.debug,'debug','release')}/log4net.dll" />
        <if test="${file::exists(log4netbinary)}">
            <copy file="${log4netbinary}" tofile="${nlog.dir}/log4net.dll" />
            <copy file="tests/NLog.Benchmark/log4net.config" tofile="${nlog.dir}/log4net.config" />
        </if>
        <exec program="${nlog.dir}/NLog.Benchmark.exe" workingdir="${nlog.dir}" commandline="Benchmark.xml ${benchmark.mode}" useruntimeengine="true" />
    </target>

    <target name="NLog.Benchmark-LAB" depends="NLog">
        <copy todir="${nlog.dir}">
            <fileset basedir="${enterpriselib.bin.dir}">
                <include name="Microsoft.Practices.*.dll" />
                <include name="Microsoft.Practices.*.pdb" />
            </fileset>
        </copy>
        <delete file="${nlog.dir}/NLog.Benchmark-log4net.exe" failonerror="false" />
        <exec program="perl" commandline="tests/NLog.Benchmark/unroll_loop.pl tests/NLog.Benchmark/Benchmark.cs tests/NLog.Benchmark/Benchmark.Unrolled.cs ${benchmark.loop.unroll}" />
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark-lab.exe" define="${nlog.define},ENTLIB" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.Benchmark">
                <include name="**/*.cs" />
                <exclude name="Benchmark.cs" />
            </sources>
            <references>
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
                <include name="${nlog.dir}/Microsoft.*.dll" />
            </references>
        </csc>
        <copy file="tests/NLog.Benchmark/EntLibLAB.config" tofile="${nlog.dir}/NLog.Benchmark-lab.exe.config" />
        <exec program="${nlog.dir}/NLog.Benchmark-lab.exe" workingdir="${nlog.dir}" commandline="Benchmark-lab.xml ${benchmark.mode}" />
    </target>

    <target name="pfiles">
        <property name="nlog.dir" value="${environment::get-folder-path('ProgramFiles')}\NLog\bin\${framework::get-target-framework()}" unless="${property::exists('nlog.dir')}" />
    </target>

    <target name="NLogC" depends="NLog, NLogC-${framework::get-target-framework()}">
        <copy todir="${nlog.dir}/include">
            <fileset basedir="tests/NLogC">
                <include name="NLogC.h" />
                <include name="NLogger.h" />
            </fileset>
        </copy>
    </target>

    <target name="NLogC-compile">
        <path id="build.path.include">
            <pathelement dir="${visualc.dir}/INCLUDE" />
        </path>

        <path id="build.path.lib">
            <pathelement dir="${visualc.dir}/LIB" />
            <pathelement dir="${path::combine(framework::get-sdk-directory(framework::get-target-framework()),'..')}/LIB" />
        </path>

        <path id="build.path">
            <pathelement dir="${visualstudio.dir}/Common7/IDE" />
            <pathelement dir="${visualc.dir}/BIN" />
        </path>

        <setenv verbose="true">
            <variable name="INCLUDE">
                <path refid="build.path.include" />
            </variable>
            <variable name="LIB">
                <path refid="build.path.lib" />
            </variable>
            <variable name="PATH">
                <path refid="build.path" />
            </variable>
        </setenv>

        <delete dir="${nlog.dir}/obj" if="${directory::exists(nlog.dir + '/obj')}" />
        <mkdir dir="${nlog.dir}/obj" />

        <cl outputdir="${nlog.dir}/obj" options='/D "_CRT_SECURE_NO_DEPRECATE" /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_USRDLL" /D "NLOGC_EXPORTS" /D "_WINDLL" /D "_MBCS" /FD /GS /W3 /c /Wp64 /Zi /TP ${nlogc.compile.extraoptions}'>
            <sources basedir="src/NLogC">
                <include name="**/*.cpp" />
            </sources>
            <forcedusingfiles>
                <include name="${framework::get-framework-directory(framework::get-target-framework())}/mscorlib.dll" />
                <include name="${nlog.dir}/NLog.dll" />
            </forcedusingfiles>
        </cl>
        <link output="${nlog.dir}/NLogC.dll" 
            pdbfile="${nlog.dir}/NLogC.pdb" 
            options="/nologo /INCREMENTAL:NO /NOLOGO /DLL /DEBUG /SUBSYSTEM:WINDOWS /OPT:REF /OPT:ICF /MACHINE:X86 /FIXED:No /NOENTRY /NODEFAULTLIB:nochkclr.obj /INCLUDE:__DllMainCRTStartup@12">
            <sources basedir="${nlog.dir}/obj">
                <include name="*.obj" />
            </sources>
        </link>
        <delete dir="${nlog.dir}/obj" />
    </target>

    <target name="NLogC-net-1.0">
        <readregistry property="visualstudio.dir" key="SOFTWARE\Microsoft\VisualStudio\7.0\Setup\VS\ProductDir" />
        <readregistry property="visualc.dir" key="SOFTWARE\Microsoft\VisualStudio\7.0\Setup\VC\ProductDir" failonerror="false" />
        <if test="${not property::exists('visualc.dir')}">
            <property name="visualc.dir" value="${visualstudio.dir}\VC7" />
        </if>
        <property name="nlogc.compile.extraoptions" value="/clr" />
        <call target="NLogC-compile" />
    </target>

    <target name="NLogC-net-1.1">
        <readregistry property="visualstudio.dir" key="SOFTWARE\Microsoft\VisualStudio\7.1\Setup\VS\ProductDir" />
        <readregistry property="visualc.dir" key="SOFTWARE\Microsoft\VisualStudio\7.1\Setup\VC\ProductDir" failonerror="false" />
        <if test="${not property::exists('visualc.dir')}">
            <property name="visualc.dir" value="${visualstudio.dir}\VC7" />
        </if>
        <property name="nlogc.compile.extraoptions" value="/clr" />
        <call target="NLogC-compile" />
    </target>

    <target name="NLogC-net-2.0" depends="configure">
        <readregistry property="visualstudio.dir" key="SOFTWARE\Microsoft\VisualStudio\8.0\Setup\VS\ProductDir" />
        <readregistry property="visualc.dir" key="SOFTWARE\Microsoft\VisualStudio\8.0\Setup\VC\ProductDir" failonerror="false" />
        <if test="${not property::exists('visualc.dir')}">
            <property name="visualc.dir" value="${visualstudio.dir}\VC" />
        </if>
        <property name="nlogc.compile.extraoptions" value="/clr:oldsyntax" />
        <call target="NLogC-compile" />
    </target>

    <!-- unsupported platforms -->
    <target name="NLogC-mono-1.0" />
    <target name="NLogC-mono-2.0" />
    <target name="NLogC-netcf-1.0" />
    <target name="NLogC-netcf-2.0" />

    <target name="NLog.Benchmark-log4net" depends="NLog">
        <copy file="${log4net.bin.dir}/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/${if(nlog.debug,'debug','release')}/log4net.dll" tofile="${nlog.dir}/log4net.dll" />
        <delete file="${nlog.dir}/NLog.Benchmark-log4net.exe" failonerror="false" />
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark-log4net.exe" define="${nlog.define},LOG4NET" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.Benchmark">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/log4net.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="tests/NLog.Benchmark/log4net.config" tofile="${nlog.dir}/log4net.config" />
        <exec program="${nlog.dir}/NLog.Benchmark-log4net.exe" workingdir="${nlog.dir}" commandline="Benchmark-log4net.xml ${benchmark.mode}" />
    </target>

    <target name="NLog.Benchmark-log4net-withformat" depends="NLog">
        <copy file="${log4net.bin.dir}/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/${if(nlog.debug,'debug','release')}/log4net.dll" tofile="${nlog.dir}/log4net.dll" />
        <delete file="${nlog.dir}/NLog.Benchmark-log4net.exe" failonerror="false" />
        <exec program="perl" commandline="tests/NLog.Benchmark/unroll_loop.pl tests/NLog.Benchmark/Benchmark.cs tests/NLog.Benchmark/Benchmark.Unrolled.cs ${benchmark.loop.unroll}" />
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark-log4net.exe" define="${nlog.define},LOG4NET,LOG4NETWITHFORMAT" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.Benchmark">
                <include name="**/*.cs" />
                <exclude name="Benchmark.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/log4net.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="tests/NLog.Benchmark/log4net.config" tofile="${nlog.dir}/log4net.config" />
        <exec program="${nlog.dir}/NLog.Benchmark-log4net.exe" workingdir="${nlog.dir}" commandline="Benchmark-log4net-withformat.xml ${benchmark.mode}" />
    </target>

    <target name="NLog.Benchmark-log4net-with-concrete-logger" depends="NLog">
        <copy file="${log4net.bin.dir}/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/${if(nlog.debug,'debug','release')}/log4net.dll" tofile="${nlog.dir}/log4net.dll" />
        <delete file="${nlog.dir}/NLog.Benchmark-log4net.exe" failonerror="false" />
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark-log4net.exe" define="${nlog.define},LOG4NET_WITH_FASTLOGGER" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="tests/NLog.Benchmark">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/log4net.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="tests/NLog.Benchmark/log4net.config" tofile="${nlog.dir}/log4net.config" />
        <exec program="${nlog.dir}/NLog.Benchmark-log4net.exe" workingdir="${nlog.dir}" commandline="Benchmark-log4net-concrete-logger.xml ${benchmark.mode}" />
    </target>

    <target name="all-benchmarks" depends="NLog.Benchmark, NLog.Benchmark-log4net-withformat" />

    <target name="test" depends="NLog.UnitTests">
        <if test="${framework::get-family(framework::get-target-framework())=='net'}">
            <nunit2 failonerror="false">
                <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
                <test assemblyname="${nlog.dir}/NLog.UnitTests.dll" />
            </nunit2>
        </if>

        <if test="${framework::get-family(framework::get-target-framework())=='mono'}">
            <mkdir dir="build/${buildsubdir}/test_results_xml" />
            <exec workingdir="${nlog.dir}" program="nunit-console" verbose="true" 
                commandline="NLog.UnitTests.dll /labels /xml=${project::get-base-directory()}/build/${buildsubdir}/test_results_xml/NLog.UnitTests.dll-results.xml" />
        </if>
    </target>

    <target name="webtest" depends="NLog, NLog.ComInterop, NLog.UnitTests.Web">
        <!-- stop IIS on local machine -->

        <echo message="Stopping IIS..." />
        <exec program="iisreset.exe" commandline="/stop" />

        <!-- copy binaries to the "bin" directory -->

        <copy todir="${webtest.dir}/bin" verbose="true">
            <fileset basedir="${nlog.dir}">
                <include name="NLog.dll" />
                <include name="NLog.ComInterop.dll" />
                <include name="cloverruntime.dll" />
            </fileset>
        </copy>

        <!-- register NLog.ComInterop.dll COM component -->

        <echo message="Registering COM interop library..." />

        <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'regasm.exe')}"
            commandline="/tlb /codebase ${webtest.dir}/bin/NLog.ComInterop.dll" />

        <!-- start IIS -->
        
        <echo message="Starting IIS..." />
        <exec program="iisreset.exe" commandline="/start" />

        <sleep seconds="5" />

        <!-- run unit tests -->
        
        <echo message="Running tests..." />

        <nunit2 failonerror="false">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
            <test assemblyname="${nlog.dir}/NLog.UnitTests.Web.dll" />
        </nunit2>

        <sleep seconds="5" />
        
        <echo message="Running tests again..." />
        
        <nunit2 failonerror="false">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
            <test assemblyname="${nlog.dir}/NLog.UnitTests.Web.dll" />
        </nunit2>

        <if test="false">

            <sleep seconds="5" /> <!-- give Clover some time to dump its statistics -->

            <!-- stop IIS -->

            <echo message="Stopping IIS..." />
            <exec program="iisreset.exe" commandline="/stop" />

            <!-- unregister COM components -->

            <echo message="Unregistering COM interop library..." />

            <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'regasm.exe')}"
                commandline="/unregister /tlb ${webtest.dir}/bin/NLog.ComInterop.dll" if="false" />

            <!-- start IIS -->
            <echo message="Starting IIS..." />
            <exec program="iisreset.exe" commandline="/start" />
        </if>

    </target>

    <target name="dowebtest" depends="NLog, NLog.ComInterop, NLog.UnitTests.Web">
        <echo message="Running tests..." />

        <nunit2 failonerror="false">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
            <test assemblyname="${nlog.dir}/NLog.UnitTests.Web.dll" />
        </nunit2>
    </target>

    <target name="configure-mono-1.0">
        <property name="nlog.define" value="${nlog.define};MONO;MONO_1_0" />
    </target>
    <target name="configure-mono-2.0">
        <property name="nlog.define" value="${nlog.define};MONO;MONO_2_0;NET_2_API" />
        <property name="nlog.csc.args" value="/nowarn:1591,1699" />
    </target>

    <target name="configure-net-1.0">
        <property name="nlog.define" value="${nlog.define};DOTNET;DOTNET_1_0" />
    </target>
    
    <target name="configure-net-1.1">
        <property name="nlog.define" value="${nlog.define};DOTNET;DOTNET_1_1" />
        <property name="ilmerge.version" value="1.1" />
    </target>

    <target name="configure-net-2.0">
        <property name="ilmerge.version" value="2" />
        <property name="nlog.define" value="${nlog.define};DOTNET;DOTNET2;DOTNET_2_0;NET_2_API" />
        <property name="nlog.csc.args" value="/nowarn:1591,1699" />
    </target>

    <target name="configure-netcf-1.0">
        <property name="nlog.define" value="${nlog.define};NETCF;NETCF_1_0" />
    </target>

    <target name="configure-netcf-2.0">
        <property name="nlog.define" value="${nlog.define};NETCF;NETCF_2_0;NET_2_API" />
        <property name="nlog.csc.args" value="/nowarn:1591,1699" />
    </target>

    <target name="build-mono-1.0" depends="NLog, publisher-policy" />
    <target name="build-mono-2.0" depends="NLog, publisher-policy" />
    <target name="build-net-1.0" depends="NLog, NLog.ComInterop, NLogC, publisher-policy" />
    <target name="build-net-1.1" depends="NLog, NLog.ComInterop, NLogC, publisher-policy" />
    <target name="build-net-2.0" depends="NLog, NLog.ComInterop, NLogC, publisher-policy" />
    <target name="build-netcf-1.0" depends="NLog" />
    <target name="build-netcf-2.0" depends="NLog" />

    <target name="publisher-policy" depends="configure, update-build-number">
        <uptodate property="publisherpolicy.uptodate">
            <targetfiles>
                <include name="${nlog.dir}/Policy.${nlog.version.major}.${nlog.version.minor}.NLog.dll" />
            </targetfiles>
            <sourcefiles basedir=".">
                <include name="src/NLog/AssemblyBuildInfo.cs" />
            </sourcefiles>
        </uptodate>
        <if test="${not publisherpolicy.uptodate}">
            <copy file="src/publisher_policy.config.template" tofile="${nlog.dir}/Policy.${nlog.version.major}.${nlog.version.minor}.NLog.xml" />
            <xmlpoke file="${nlog.dir}/Policy.${nlog.version.major}.${nlog.version.minor}.NLog.xml" xpath="/configuration/runtime/ms:assemblyBinding/ms:dependentAssembly/ms:bindingRedirect/@oldVersion"
                value="${nlog.version.major}.${nlog.version.minor}.0.0-${nlog.version.major}.${nlog.version.minor}.${nlog.version.revision}.${int::parse(nlog.version.build) - 1}">
                <namespaces>
                    <namespace prefix="ms" uri="urn:schemas-microsoft-com:asm.v1" />
                </namespaces>
            </xmlpoke>
            <xmlpoke file="${nlog.dir}/Policy.${nlog.version.major}.${nlog.version.minor}.NLog.xml" xpath="/configuration/runtime/ms:assemblyBinding/ms:dependentAssembly/ms:bindingRedirect/@newVersion"
                value="${nlog.version.major}.${nlog.version.minor}.${nlog.version.revision}.${nlog.version.build}">
                <namespaces>
                    <namespace prefix="ms" uri="urn:schemas-microsoft-com:asm.v1" />
                </namespaces>
            </xmlpoke>

            <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'al')}"
                commandline="/nologo /link:Policy.${nlog.version.major}.${nlog.version.minor}.NLog.xml /out:Policy.${nlog.version.major}.${nlog.version.minor}.NLog.dll /keyfile:${path::combine(project::get-base-directory(),'src/NLog.snk')} /version:1.0.0.0"
                workingdir="${nlog.dir}" />
        </if>
    </target>

    <target name="installer" depends="allframeworksdebugandrelease, clean_examples, help, vs2005templates">
        <readregistry property="nsis.dir" key="SOFTWARE\NSIS\" />
        <property name="makensis.exe" value="${nsis.dir}/makensis.exe" />

        <exec program="${makensis.exe}" commandline="/DNLOGVERSION=${nlog.package.name} /DOPTIONALDEBUG= tools\SetupNLog.nsi" verbose="true" />
        <move file="SetupNLog.exe" tofile="${installer.name}" overwrite="true" />
        <exec program="${makensis.exe}" commandline="/DNLOGVERSION=${nlog.package.name}-debug /DOPTIONALDEBUG=-debug tools\SetupNLog.nsi" verbose="true" />
        <move file="SetupNLog.exe" tofile="${installer.debug.name}" overwrite="true" />
    </target>

    <target name="allframeworksdebugandrelease">
        <call target="debug" />
        <call target="allframeworks" />
        <call target="release" />
        <call target="allframeworks" />
    </target>
    
    <target name="allframeworks">
        <property name="debugrelease" value="release" />
        <property name="debugrelease" value="debug" if="${nlog.debug}" />
        <exec program="nant" commandline="-t:net-1.0 -D:nlog.package.name=${nlog.package.name} ${debugrelease} build schema binary_snapshot" />
        <exec program="nant" commandline="-t:net-1.1 -D:nlog.package.name=${nlog.package.name} ${debugrelease} build schema binary_snapshot" />
        <exec program="nant" commandline="-t:net-2.0 -D:nlog.package.name=${nlog.package.name} ${debugrelease} build schema binary_snapshot" />
        <exec program="nant" commandline="-t:netcf-1.0 -D:nlog.package.name=${nlog.package.name} ${debugrelease} build binary_snapshot" />
        <exec program="nant" commandline="-t:netcf-2.0 -D:nlog.package.name=${nlog.package.name} ${debugrelease} build binary_snapshot" />
        <exec program="nant" commandline="-t:mono-1.0 -D:nlog.package.name=${nlog.package.name} ${debugrelease} build schema binary_snapshot" />
        <exec program="nant" commandline="-t:mono-2.0 -D:nlog.package.name=${nlog.package.name} ${debugrelease} build schema binary_snapshot" />
    </target>

    <target name="sandcastle-help" depends="xmldoc,helpwebsite">
        <mkdir dir="build/doc/sandcastle" />
        <copy file="build/doc/NLog.xml" tofile="build/doc/sandcastle/comments.xml" />
        <copy file="${sandcastle.dir}/Presentation/Configuration/Sandcastle.config" tofile="build/doc/sandcastle/Sandcastle.config">
            <filterchain>
                <replacestring from="&quot;..\..\" to="&quot;${sandcastle.dir}\" />
                <replacestring from="&quot;..\" to="&quot;${sandcastle.dir}\Examples\" />
            </filterchain>
        </copy>
        <exec program="${sandcastle.dir}/ProductionTools/MRefBuilder.exe" commandline="../NLog.dll /out:reflection.xml" workingdir="build/doc/sandcastle" />
        <exec program="${sandcastle.dir}/ProductionTools/XslTransform.exe" 
            commandline="&quot;${sandcastle.dir}/ProductionTransforms/AddOverloads.xsl&quot; reflection.xml /out:reflection2.xml"
            workingdir="build/doc/sandcastle" />
        <exec program="${sandcastle.dir}/ProductionTools/XslTransform.exe" 
            commandline="&quot;${sandcastle.dir}/ProductionTransforms/AddGuidFileNames.xsl&quot; reflection2.xml /out:reflection.xml"
            workingdir="build/doc/sandcastle" />
        <exec program="${sandcastle.dir}/ProductionTools/XslTransform.exe" 
            commandline="&quot;${sandcastle.dir}/ProductionTransforms/ReflectionToManifest.xsl&quot; reflection.xml /out:manifest.xml"
            workingdir="build/doc/sandcastle" />
        <mkdir dir="build/doc/sandcastle/Output" />
        <mkdir dir="build/doc/sandcastle/Output/html" />
        <copy todir="build/doc/sandcastle/Output">
            <fileset basedir="${sandcastle.dir}/Presentation">
                <include name="art/*" />
                <include name="scripts/*" />
                <include name="styles/*" />
            </fileset>
        </copy>
        <copy todir="build/doc/sandcastle/Output/html">
            <fileset basedir="build/doc/helpweb">
                <include name="**/*" />
            </fileset>
        </copy>
        <exec program="${sandcastle.dir}/ProductionTools/BuildAssembler.exe" 
            commandline="manifest.xml /config:Sandcastle.config"
            workingdir="build/doc/sandcastle" />
        <exec program="${sandcastle.dir}/ProductionTools/XslTransform.exe" 
            commandline="&quot;${sandcastle.dir}/ProductionTransforms/ReflectionToChmContents.xsl&quot; reflection.xml /arg:html=Output\html /out:Output\test.hhc"
            workingdir="build/doc/sandcastle" />
        <copy file="NLog.hhp" tofile="build/doc/sandcastle/Output/NLog.hhp" />
        <exec program="C:\Program Files\HTML Help Workshop\hhc.exe" commandline="NLog.hhp" workingdir="build/doc/sandcastle/Output" />
    </target>

    <target name="help" depends="xmldoc, helpwebsite">
        <copy file="${project::get-base-directory()}/web/syntax.xsl" tofile="build/doc/syntax.xsl" overwrite="true" />
        <xmlpoke file="build/doc/syntax.xsl" xpath="//xsl:param[@name='external-base']" value="file://${webbuild.dir}">
            <namespaces>
                <namespace prefix="xsl" uri="http://www.w3.org/1999/XSL/Transform" />
            </namespaces>
        </xmlpoke>
        <copy todir="build/doc/help/examples">
            <fileset basedir="build/doc/helpweb/examples">
                <include name="**/*" />
            </fileset>
        </copy>
        <uptodate property="help.uptodate">
            <targetfiles>
                <include name="${help_package.name}" />
            </targetfiles>
            <sourcefiles basedir=".">
                <include name="build/doc/NLog.dll" />
                <include name="build/doc/helpweb/**/*" />
                <include name="NLog-${ndoc.version}.ndoc" />
            </sourcefiles>
        </uptodate>
        <if test="${not help.uptodate}">
            <exec program="${ndoc.console.exe}" verbose="true" workingdir="." commandline="${ndoc.console.args} -documenter=MSDN -project=.\NLog.ndoc" />
            <zip zipfile="${help_package.name}">
                <fileset basedir="build/doc/help">
                    <include name="NLog.chm" />
                </fileset>
            </zip>
        </if>
    </target>

    <target name="cleanwebsite" depends="xmldoc, website">
    </target>

    <target name="publish_website_help" depends="help">
        <zip zipfile="web.zip">
            <fileset basedir="build/doc/help">
                <include name="**/*" />
                <exclude name="**/NLog.chm" />
            </fileset>
        </zip>
        <echo message="Uploading web.zip and tools/web_install.sh to ${deploy.host}..." />
        <exec program="${scp.program}" commandline="${scp.args} web.zip tools/web_install.sh ${deploy.host}:." workingdir="." />
        <echo message="Spawning web_install.sh..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${deploy.host} dos2unix web_install.sh &amp;&amp; /bin/bash web_install.sh ${webserver.deploy.dir}/help" workingdir="." />
    </target>

    <target name="publish_clover" depends="clover">
        <zip zipfile="web.zip">
            <fileset basedir="${clover.report.dir}">
                <include name="**/*" />
            </fileset>
        </zip>
        <echo message="Uploading web.zip and tools/web_install.sh to ${deploy.host}..." />
        <exec program="${scp.program}" commandline="${scp.args} web.zip tools/web_install.sh ${deploy.host}:." workingdir="." />
        <echo message="Spawning web_install.sh..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${deploy.host} dos2unix web_install.sh &amp;&amp; /bin/bash web_install.sh ${webserver.deploy.dir}/clover" workingdir="." />
        <echo message="Coverage results deployed." />
    </target>

    <target name="source_snapshot" depends="update-build-number">
        <delete dir="build/source_snapshot" if="${directory::exists('build/source_snapshot')}" />
        <property name="snapshot.dir" value="build/source_snapshot/NLog-${nlog.package.name}" />
        <mkdir dir="build/source_snapshot" if="${not directory::exists('build/source_snapshot')}" />
        <exec program="svn" commandline="export . ${snapshot.dir}" />
        <copy file="build/NLog.buildversion" tofile="${snapshot.dir}/NLog.version" />
        <copy todir="${snapshot.dir}">
            <fileset basedir=".">
                <include name="src/**/AssemblyBuildInfo.cs" />
            </fileset>
        </copy>
        <zip zipfile="${source_snapshot.name}">
            <fileset basedir="build/source_snapshot">
                <include name="**/*" />
                <exclude name="_svn" />
            </fileset>
        </zip>
    </target>

    <target name="astyle">
        <astyle style="NAnt" cleanup="true" >
            <fileset>
                <include name="**/*.cs" />
                <exclude name="**/_*.cs" />
            </fileset>
        </astyle>
    </target>

    <target name="sln">
        <call target="clean" />


        <property name="oldframework" value="${nant.settings.currentframework}" />
        
        <property name="nant.settings.currentframework" value="net-1.1" failonerror="false" />

        <solution configuration="Release" solutionfile="NLog.vs2003.sln" />
        <solution configuration="Debug" solutionfile="NLog.vs2003.sln" />
        <solution configuration="Release" solutionfile="tests/NLogTests.vs2003.sln" />
        <solution configuration="Debug" solutionfile="tests/NLogTests.vs2003.sln" />
        <property name="nant.settings.currentframework" value="${oldframework}" failonerror="false" />

        <call target="clean" />

        <exec program="${framework::get-framework-directory('net-2.0')}/msbuild.exe" commandline="/p:Configuration=Debug /t:Rebuild NLog.vs2005.sln" />
        <exec program="${framework::get-framework-directory('net-2.0')}/msbuild.exe" commandline="/p:Configuration=Release /t:Rebuild NLog.vs2005.sln" />
        <exec program="${framework::get-framework-directory('net-2.0')}/msbuild.exe" commandline="/p:Configuration=Debug /t:Rebuild tests\NLogTests.vs2005.sln" />
        <exec program="${framework::get-framework-directory('net-2.0')}/msbuild.exe" commandline="/p:Configuration=Release /t:Rebuild tests\NLogTests.vs2005.sln" />

        <call target="clean" />
    </target>

    <target name="upload_web_snapshot">
        <property name="webserver.deploy.dir" value="${webserver.deploy.dir}/snapshots/${nlog.package.name}/web" />
        <call target="deploy-web" />
    </target>

    <target name="schema" depends="NLog, xmldoc">
        <uptodate property="schema.uptodate">
            <targetfiles>
                <include name="${nlog.dir}/NLog.xsd" />
            </targetfiles>
            <sourcefiles>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="build/doc/doc.xml" />
                <include name="tools/MakeNLogXSD/TemplateNLog.xsd" />
                <include name="tools/MakeNLogXSD/Program.cs" />
            </sourcefiles>
        </uptodate>
        <if test="${not schema.uptodate}">
            <csc target="exe" output="${nlog.dir}/MakeNLogXSD.exe" define="${nlog.define}" warninglevel="${csc.warninglevel}" failonerror="false">
                <sources>
                    <include name="tools/MakeNLogXSD/Program.cs" />
                </sources>
                <references>
                    <include name="${nlog.dir}/NLog.dll" />
                    <include name="mscorlib.dll" />
                    <include name="System.dll" />
                    <include name="System.Xml.dll" />
                </references>
                <resources basedir="tools/MakeNLogXSD" prefix="MakeNLogXSD" dynamicprefix="true">
                    <include name="TemplateNLog.xsd" />
                </resources>
            </csc>
            <exec program="${nlog.dir}/MakeNLogXSD.exe" 
                commandline="NLog.xsd &quot;${project::get-base-directory()}/build/doc/doc.xml&quot;"
                workingdir="${nlog.dir}" useruntimeengine="true" />
            <delete file="${nlog.dir}/MakeNLogXSD.exe" />
        </if>
    </target>

    <target name="vs2005templates">
        <mkdir dir="build/templates" />
        <foreach item="String" in="Empty,Typical,Console" delim="," property="projecttype">
            <foreach item="String" in="CSharp,VisualBasic,JSharp" delim="," property="language">
                <!-- standard version -->
                <delete dir="tmp_dir" failonerror="false" />
                <copy todir="tmp_dir">
                    <fileset basedir="tools/VS2005Templates/ItemTemplates/${projecttype}NLogConfig">
                        <include name="**/*" />
                    </fileset>
                    <filterchain>
                        <replacestring from="$nlogversion$" to="${nlog.version}" />
                        <replacestring from="$projecttype$" to="${language}" />
                        <replacestring from="$projectsubtype$" to="" />
                    </filterchain>
                </copy>
                <zip zipfile="build/templates/${language}${projecttype}NLogConfig.zip">
                    <fileset basedir="tmp_dir">
                        <include name="**/*" />
                    </fileset>
                </zip>

                <!-- web standard version -->
                <delete dir="tmp_dir" failonerror="false" />
                <copy todir="tmp_dir">
                    <fileset basedir="tools/VS2005Templates/ItemTemplates/${projecttype}NLogConfig">
                        <include name="**/*" />
                    </fileset>
                    <filterchain>
                        <replacestring from="$nlogversion$" to="${nlog.version}" />
                        <replacestring from="$projecttype$" to="Web" />
                        <replacestring from="$projectsubtype$" to="${language}" />
                    </filterchain>
                </copy>
                <zip zipfile="build/templates/Web${language}${projecttype}NLogConfig.zip">
                    <fileset basedir="tmp_dir">
                        <include name="**/*" />
                    </fileset>
                </zip>
            </foreach>
        </foreach>
        <delete dir="tmp_dir" failonerror="false" />
    </target>

    <target name="install-schema-vs2005" depends="schema">
        <readregistry property="visualstudio.dir" key="SOFTWARE\Microsoft\VisualStudio\8.0\Setup\VS\ProductDir" />
        <copy file="${nlog.dir}/NLog.xsd" tofile="${visualstudio.dir}/Xml/Schemas/NLog.xsd" />
    </target>

    <target name="upload_snapshot">
        <echo message="Creating a directory for ${nlog.package.name}..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${deploy.host} mkdir -p ${webserver.deploy.dir}/snapshots/${nlog.package.name} ${webserver.deploy.dir}/snapshots/${nlog.package.name}/web" failonerror="false" />
        <echo message="Uploading nlog-${nlog.package.name}*.*..." />
        <exec program="${scp.program}" commandline="${scp.args} ${nlog.release.dir}/nlog-${nlog.package.name}*.* ${deploy.host}:${webserver.deploy.dir}/snapshots/${nlog.package.name}/" />
        <echo message="Uploading ChangeLog..." />
        <exec program="${scp.program}" commandline="${scp.args} ChangeLog ${deploy.host}:${webserver.deploy.dir}/snapshots/${nlog.package.name}/" />
        <echo message="Uploading NLog.buildversion..." />
        <exec program="${scp.program}" commandline="${scp.args} build/NLog.buildversion ${deploy.host}:${webserver.deploy.dir}/snapshots/${nlog.package.name}/" />
        <echo message="Calculating MD5SUM..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${deploy.host} (cd ${webserver.deploy.dir}/snapshots/${nlog.package.name}; md5sum nlog-${nlog.package.name}* > MD5SUM)" />
        <echo message="Creating 'latest' link..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${deploy.host} ln -nfs ${nlog.package.name} web/www.nlog-project.org/html/snapshots/latest" />
        <echo message="Done." />
    </target>

    <target name="clean_all" depends="clean_examples">
        <delete>
            <fileset basedir="build">
                <include name="**/*" />
                <include name="*" />
                <exclude name="readme.txt" />
            </fileset>
        </delete>
    </target>

    <target name="snapshot" depends="clean_all, sync-vs-projects, allframeworksdebugandrelease, source_snapshot, help, installer">
    </target>

    <target name="publish_snapshot" depends="snapshot, upload_snapshot, upload_web_snapshot">
    </target>

    <target name="webxmlwithsyntax">
        <mkdir dir="build/doc/webxmlwithsyntax" />
        <exec program="${ndocsyntax.path}" 
              commandline="-outDir build/doc/webxmlwithsyntax web/*.xml" 
              workingdir="." useruntimeengine="true" />
        <exec program="${ndocsyntax.path}" 
              commandline="-outDir build/doc/webxmlwithsyntax web/*.xsl" 
              workingdir="." useruntimeengine="true" />
    </target>

    <target name="website" depends="xmldoc, webxmlwithsyntax">
        <property name="webbuild.dir" value="${path::combine(project::get-base-directory(),'build/doc/web')}" />
        <property name="web.buildmode" value="web" />
        <property name="web.sourceforge" value="1" />
        <call target="buildwebsite" />
        <copy file="build/doc/web/introduction.html" tofile="build/doc/web/index.html" />
    </target>

    <target name="helpwebsite" depends="xmldoc, webxmlwithsyntax">
        <property name="webbuild.dir" value="${path::combine(project::get-base-directory(),'build/doc/helpweb')}" />
        <property name="web.buildmode" value="help" />
        <property name="web.sourceforge" value="0" />
        <call target="buildwebsite" />
    </target>

    <target name="buildwebsite" depends="clean_examples">
        <mkdir dir="${webbuild.dir}" />
        <mkdir dir="${webbuild.dir}/examples" />

        <copy todir="${webbuild.dir}">
            <fileset basedir="web">
                <include name="*.css" />
                <include name="*.png" />
                <include name="*.jpg" />
                <include name="*.gif" />
            </fileset>
        </copy>

        <copy todir="${webbuild.dir}/examples">
            <fileset basedir="examples">
                <include name="**/*" />
            </fileset>
        </copy>

        <style out="${webbuild.dir}/targets.html" style="web/targets.xsl" in="build/doc/doc.xml">
            <parameters>
                <parameter name="build_time" value="${buildtime}" />
                <parameter name="nlog_package" value="${nlog.package.name}" />
                <parameter name="external-base" value="${webbuild.dir}" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="documentation" />
                <parameter name="subpage_id_override" value="targets" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>

        <style out="${webbuild.dir}/layoutrenderers.html" style="web/layoutrenderers.xsl" in="build/doc/doc.xml">
            <parameters>
                <parameter name="build_time" value="${buildtime}" />
                <parameter name="nlog_package" value="${nlog.package.name}" />
                <parameter name="external-base" value="${webbuild.dir}" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="documentation" />
                <parameter name="subpage_id_override" value="layoutrenderers" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>
        
        <style out="${webbuild.dir}/layouts.html" style="web/layouts.xsl" in="build/doc/doc.xml">
            <parameters>
                <parameter name="build_time" value="${buildtime}" />
                <parameter name="nlog_package" value="${nlog.package.name}" />
                <parameter name="external-base" value="${webbuild.dir}" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="documentation" />
                <parameter name="subpage_id_override" value="layouts" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>
        
        <style out="${webbuild.dir}/filters.html" style="web/filters.xsl" in="build/doc/doc.xml">
            <parameters>
                <parameter name="build_time" value="${buildtime}" />
                <parameter name="nlog_package" value="${nlog.package.name}" />
                <parameter name="external-base" value="${webbuild.dir}" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="documentation" />
                <parameter name="subpage_id_override" value="filters" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>
        
        <style out="${webbuild.dir}/conditions.html" style="web/conditions.xsl" in="build/doc/doc.xml">
            <parameters>
                <parameter name="build_time" value="${buildtime}" />
                <parameter name="nlog_package" value="${nlog.package.name}" />
                <parameter name="external-base" value="${webbuild.dir}" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="documentation" />
                <parameter name="subpage_id_override" value="conditions" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>

        <foreach item="String" in="${nlog.targetNames}" delim="," property="t">
            <style out="${webbuild.dir}/target.${t}.html" style="web/targets.xsl" in="build/doc/doc.xml">
                <parameters>
                    <parameter name="build_time" value="${buildtime}" />
                    <parameter name="nlog_package" value="${nlog.package.name}" />
                    <parameter name="external-base" value="${webbuild.dir}" />
                    <parameter name="file_extension" value="html" />
                    <parameter name="sourceforge" value="${web.sourceforge}" />
                    <parameter name="page_id_override" value="documentation" />
                    <parameter name="subpage_id_override" value="targets" />
                    <parameter name="mode" value="${web.buildmode}" />
                    <parameter name="target_name" value="${t}" />
                </parameters>
            </style>
        </foreach>

        <foreach item="String" in="${nlog.layoutRendererNames}" delim="," property="t">
            <style out="${webbuild.dir}/lr.${t}.html" style="web/layoutrenderers.xsl" in="build/doc/doc.xml">
                <parameters>
                    <parameter name="build_time" value="${buildtime}" />
                    <parameter name="nlog_package" value="${nlog.package.name}" />
                    <parameter name="external-base" value="${webbuild.dir}" />
                    <parameter name="file_extension" value="html" />
                    <parameter name="sourceforge" value="${web.sourceforge}" />
                    <parameter name="page_id_override" value="documentation" />
                    <parameter name="subpage_id_override" value="layoutrenderers" />
                    <parameter name="mode" value="${web.buildmode}" />
                    <parameter name="lr_name" value="${t}" />
                </parameters>
            </style>
        </foreach>

        <foreach item="String" in="${nlog.layoutNames}" delim="," property="t">
            <style out="${webbuild.dir}/layout.${t}.html" style="web/layouts.xsl" in="build/doc/doc.xml">
                <parameters>
                    <parameter name="build_time" value="${buildtime}" />
                    <parameter name="nlog_package" value="${nlog.package.name}" />
                    <parameter name="external-base" value="${webbuild.dir}" />
                    <parameter name="file_extension" value="html" />
                    <parameter name="sourceforge" value="${web.sourceforge}" />
                    <parameter name="page_id_override" value="documentation" />
                    <parameter name="subpage_id_override" value="layouts" />
                    <parameter name="mode" value="${web.buildmode}" />
                    <parameter name="l_name" value="${t}" />
                </parameters>
            </style>
        </foreach>

        <foreach item="String" in="${nlog.filterNames}" delim="," property="t">
            <style out="${webbuild.dir}/filter.${t}.html" style="web/filters.xsl" in="build/doc/doc.xml">
                <parameters>
                    <parameter name="build_time" value="${buildtime}" />
                    <parameter name="nlog_package" value="${nlog.package.name}" />
                    <parameter name="external-base" value="${webbuild.dir}" />
                    <parameter name="file_extension" value="html" />
                    <parameter name="sourceforge" value="${web.sourceforge}" />
                    <parameter name="page_id_override" value="documentation" />
                    <parameter name="subpage_id_override" value="filters" />
                    <parameter name="mode" value="${web.buildmode}" />
                    <parameter name="filter_name" value="${t}" />
                </parameters>
            </style>
        </foreach>

        <style destdir="${webbuild.dir}" style="web/style.xsl">
            <infiles basedir="build/doc/webxmlwithsyntax">
                <include name="*.xml" />
                <exclude name="common.en.xml" />
            </infiles>
            <parameters>
                <parameter name="build_time" value="${buildtime}" />
                <parameter name="nlog_package" value="${nlog.package.name}" />
                <parameter name="external-base" value="${webbuild.dir}" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>
    </target>
    
    <target name="load-clover">
        <loadtasks assembly="${clover.home}/CloverNAnt-0.85.dll" />
    </target>

    <target name="clover" depends="load-clover">
        <property name="clover.enabled" value="true" />
        <call target="configure" />
        <call target="clean" />
        <delete file="${clover.build.dir}/clover.cdb" failonerror="false" />
        <clover-setup 
            initstring="${clover.build.dir}/clover.cdb"
            builddir="${clover.build.dir}"
            enabled="${clover.enabled}"
            flushinterval="100">
            <fileset basedir="src">
                <include name="**/*" />
                <exclude name="NLog.UnitTests.Web/**/*" />
            </fileset>
        </clover-setup>
        <call target="build" />
        <call target="nunit2report" />
        <clover-report>
            <current title="NLog Coverage" output="${clover.report.dir}">
                <format type="html" />
            </current>
        </clover-report>
    </target>

    <target name="load-nunit2report">
        <loadtasks assembly="tools/nunit2report/NAnt.NUnit2ReportTasks.dll" />
    </target>

    <target name="setup_unittest_website">
        <mkiisdir dirpath="${project::get-base-directory()}/nlogtest" vdirname="nlogtest" 
            authntlm="false" 
            authanonymous="true" 
            authbasic="false" 
            failonerror="false"
            />
    </target>

    <target name="nunit2report" depends="load-nunit2report, test">
        <nunit2report format="frames" todir="${nunit2.report.dir}" verbose="true">
            <fileset>
                <include name="build/${buildsubdir}/test_results_xml/*.xml" />
            </fileset>
        </nunit2report>
    </target>

    <target name="publish_nunit2report" depends="nunit2report">
        <zip zipfile="web.zip">
            <fileset basedir="${nunit2.report.dir}">
                <include name="**/*" />
            </fileset>
        </zip>
        <echo message="Uploading web.zip and tools/web_install.sh to ${deploy.host}..." />
        <exec program="${scp.program}" commandline="${scp.args} web.zip tools/web_install.sh ${deploy.host}:." workingdir="." />
        <echo message="Spawning web_install.sh..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${deploy.host} dos2unix web_install.sh &amp;&amp; /bin/bash web_install.sh ${webserver.deploy.dir}/nunit2report" workingdir="." />
        <echo message="NUnit2report results deployed." />
    </target>

    <target name="deploy-web" depends="website">
        <delete file="web.zip" if="${file::exists('web.zip')}" />
        <zip zipfile="web.zip" stampdatetime="${datetime::now()}" includeemptydirs="true">
            <fileset basedir="build/doc/web">
                <include name="**/*" />
                <exclude name="**/.svn" />
                <exclude name="**/.svn/**" />
                <exclude name="**/_svn" />
                <exclude name="**/_svn/**" />
                <exclude name="**/*.swp" />
            </fileset>
        </zip>
        <echo message="Uploading web.zip and tools/web_install.sh to ${deploy.host}..." />
        <exec program="${scp.program}" commandline="${scp.args} web.zip tools/web_install.sh ${deploy.host}:." workingdir="." />
        <echo message="Spawning web_install.sh..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${deploy.host} dos2unix web_install.sh &amp;&amp; /bin/bash web_install.sh ${webserver.deploy.dir}" workingdir="." />
        <!-- <delete file="web.zip" /> -->
    </target>

    <target name="sourceforge_release">
        <exec program="nant" commandline="publish_nunit2report" />
        <exec program="nant" commandline="clover test publish_clover" />
    </target>

    <target name="sync-vs-projects">
        <csc target="library" output="build/SyncVSProjectItems.dll">
            <sources basedir="tools">
                <include name="SyncVSProjectItems.cs" />
            </sources>
            <references>
                <include name="${nant::get-base-directory()}/NAnt.Core.dll" />
            </references>
        </csc>
        <loadtasks assembly="build/SyncVSProjectItems.dll" />
        <sync-vs-project-items>
            <project-files basedir="src/NLog">
                <include name="*.csproj" />
                <include name="*.csdproj" />
            </project-files>
            <source-files basedir="src/NLog">
                <include name="**/*.cs" />
            </source-files>
        </sync-vs-project-items>

        <sync-vs-project-items>
            <project-files basedir="src/NLog.ComInterop">
                <include name="*.csproj" />
                <include name="*.csdproj" />
            </project-files>
            <source-files basedir="src/NLog.ComInterop">
                <include name="**/*.cs" />
            </source-files>
        </sync-vs-project-items>

        <sync-vs-project-items>
            <project-files basedir="tests/NLog.Test">
                <include name="*.csproj" />
                <include name="*.csdproj" />
            </project-files>
            <source-files basedir="tests/NLog.Test">
                <include name="**/*.cs" />
            </source-files>
        </sync-vs-project-items>

        <sync-vs-project-items>
            <project-files basedir="tests/NLog.UnitTests">
                <include name="*.csproj" />
                <include name="*.csdproj" />
            </project-files>
            <source-files basedir="tests/NLog.UnitTests">
                <include name="**/*.cs" />
            </source-files>
        </sync-vs-project-items>
    </target>

    <target name="clean_examples">
        <delete>
            <fileset basedir="examples">
                <include name="**/*.suo" />
                <include name="**/bin/**/*" />
                <include name="**/obj/**/*" />
                <include name="**/bin" />
                <include name="**/obj" />
                <include name="**/*proj.user" />
            </fileset>
        </delete>
    </target>
</project>
