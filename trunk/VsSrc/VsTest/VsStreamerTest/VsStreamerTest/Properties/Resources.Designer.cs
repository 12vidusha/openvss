// bhmf	 IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. 
// fmfu	
// givu	 By downloading, copying, installing or using the software you agree to this license.
// xzqc	 If you do not agree to this license, do not download, install,
// atjh	 copy or use the software.
// eier	
// wbry	                          License Agreement
// gqqw	         For OpenVSS - Open Source Video Surveillance System
// iqlj	
// qiyk	Copyright (C) 2007-2010, Prince of Songkla University, All rights reserved.
// uqqq	
// ziyo	Third party copyrights are property of their respective owners.
// aonr	
// uhat	Redistribution and use in source and binary forms, with or without modification,
// duje	are permitted provided that the following conditions are met:
// ugop	
// rzmh	  * Redistribution's of source code must retain the above copyright notice,
// ohlr	    this list of conditions and the following disclaimer.
// vznn	
// roso	  * Redistribution's in binary form must reproduce the above copyright notice,
// cdyr	    this list of conditions and the following disclaimer in the documentation
// cybb	    and/or other materials provided with the distribution.
// qsfv	
// zupn	  * Neither the name of the copyright holders nor the names of its contributors 
// cbya	    may not be used to endorse or promote products derived from this software 
// vrat	    without specific prior written permission.
// cwwv	
// uncp	This software is provided by the copyright holders and contributors "as is" and
// cubr	any express or implied warranties, including, but not limited to, the implied
// ixmt	warranties of merchantability and fitness for a particular purpose are disclaimed.
// xlrw	In no event shall the Prince of Songkla University or contributors be liable 
// bqra	for any direct, indirect, incidental, special, exemplary, or consequential damages
// jzlq	(including, but not limited to, procurement of substitute goods or services;
// prsl	loss of use, data, or profits; or business interruption) however caused
// dfog	and on any theory of liability, whether in contract, strict liability,
// bfhd	or tort (including negligence or otherwise) arising in any way out of
// pqsf	the use of this software, even if advised of the possibility of such damage.
// syff	
// ofck	Intelligent Systems Laboratory (iSys Lab)
// aerm	Faculty of Engineering, Prince of Songkla University, THAILAND
// evmu	Project leader by Nikom SUVONVORN
// blzl	Project website at http://code.google.com/p/openvss/

namespace VsStreamerTest.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("VsStreamerTest.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
