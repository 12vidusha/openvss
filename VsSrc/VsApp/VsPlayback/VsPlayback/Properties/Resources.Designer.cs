// dgng	 IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. 
// zecs	
// tfag	 By downloading, copying, installing or using the software you agree to this license.
// xtwj	 If you do not agree to this license, do not download, install,
// bazj	 copy or use the software.
// cfmi	
// sily	                          License Agreement
// nluc	         For OpenVss - Open Source Video Surveillance System
// guen	
// nirf	Copyright (C) 2007-2009, Prince of Songkla University, All rights reserved.
// zcsm	
// kefj	Third party copyrights are property of their respective owners.
// eewn	
// kljx	Redistribution and use in source and binary forms, with or without modification,
// uenr	are permitted provided that the following conditions are met:
// tdeh	
// kyzd	  * Redistribution's of source code must retain the above copyright notice,
// ojws	    this list of conditions and the following disclaimer.
// iuka	
// nzxn	  * Redistribution's in binary form must reproduce the above copyright notice,
// cbuj	    this list of conditions and the following disclaimer in the documentation
// ogrv	    and/or other materials provided with the distribution.
// lhti	
// ualv	  * Neither the name of the copyright holders nor the names of its contributors 
// xkcm	    may not be used to endorse or promote products derived from this software 
// fcvv	    without specific prior written permission.
// heeq	
// aiku	This software is provided by the copyright holders and contributors "as is" and
// haos	any express or implied warranties, including, but not limited to, the implied
// jvsd	warranties of merchantability and fitness for a particular purpose are disclaimed.
// gerg	In no event shall the Prince of Songkla University or contributors be liable 
// qoyi	for any direct, indirect, incidental, special, exemplary, or consequential damages
// jpcc	(including, but not limited to, procurement of substitute goods or services;
// xlia	loss of use, data, or profits; or business interruption) however caused
// gzbk	and on any theory of liability, whether in contract, strict liability,
// cbvc	or tort (including negligence or otherwise) arising in any way out of
// xzbt	the use of this software, even if advised of the possibility of such damage.

namespace Vs.Playback.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Vs.Playback.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap control_end_blue {
            get {
                object obj = ResourceManager.GetObject("control_end_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap control_fastforward_blue {
            get {
                object obj = ResourceManager.GetObject("control_fastforward_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap control_pause_blue {
            get {
                object obj = ResourceManager.GetObject("control_pause_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap control_play_blue {
            get {
                object obj = ResourceManager.GetObject("control_play_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap control_repeat_blue {
            get {
                object obj = ResourceManager.GetObject("control_repeat_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap control_rewind_blue {
            get {
                object obj = ResourceManager.GetObject("control_rewind_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap control_start_blue {
            get {
                object obj = ResourceManager.GetObject("control_start_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap control_stop_blue {
            get {
                object obj = ResourceManager.GetObject("control_stop_blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap isys_color {
            get {
                object obj = ResourceManager.GetObject("isys_color", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap isyscolor {
            get {
                object obj = ResourceManager.GetObject("isyscolor", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
